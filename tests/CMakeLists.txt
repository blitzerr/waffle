# CMakeLists.txt for the Waffle tests

# Find the Catch2 package.
# This command locates Catch2 version 3.
# - `REQUIRED`: Ensures that CMake will fail if Catch2 v3 cannot be found.
# - `CONFIG`: Specifies that CMake should look for a `Catch2Config.cmake` or `catch2-config.cmake` file.
#   This file is generated by Catch2's build system when it's installed by the `catch2_ep`
#   ExternalProject target defined in the root CMakeLists.txt.
# The `CMAKE_PREFIX_PATH` was updated in the root CMakeLists.txt to include the installation
# directory of `catch2_ep`, enabling `find_package` to discover it.
find_package(Catch2 3 REQUIRED CONFIG) # Requesting Catch2 v3 specifically

# Add the test executable.
# `WaffleTests` is the name of the executable target.
# Source files are relative to this CMakeLists.txt (i.e., the 'tests' directory).
add_executable(WaffleTests
    waffle_tests.cpp
    ring_buffer_tests.cpp)

# Ensure WaffleTests depends on the external project target for Catch2.
# This explicitly tells CMake that the `catch2_ep` target (which downloads, builds, and installs Catch2)
# must be fully completed *before* any build steps for `WaffleTests` begin.
# This is crucial because `WaffleTests` links against Catch2.
# The target `catch2_ep` is defined in the parent scope (root CMakeLists.txt).
add_dependencies(WaffleTests catch2_ep)

# Link the test executable against WaffleHelpers (defined in the parent scope)
# and Catch2::Catch2WithMain.
# - `Waffle`: The main library being tested.
# - `WaffleHelpers`: Internal helper components, potentially also under test.
# - `Catch2::Catch2WithMain`: An imported target provided by Catch2 once `find_package(Catch2)` succeeds.
#   It links against the Catch2 library and includes a pre-compiled main() function, simplifying test setup.
# - `PRIVATE`: Specifies that these libraries are private dependencies of `WaffleTests` and are not
#   propagated to any other target that might link against `WaffleTests` (though for executables, this is less critical).
target_link_libraries(WaffleTests PRIVATE Waffle WaffleHelpers Catch2::Catch2WithMain)

# Set C++ standard for the test target as well
# Ensures that the test code is compiled using C++20, consistent with the main library.
# `target_compile_features` is the modern CMake way to specify C++ standard requirements per target.
target_compile_features(WaffleTests PRIVATE cxx_std_20)

# Discover tests automatically using CTest and Catch2's test registration
# The `include(Catch)` module (made available by `find_package(Catch2)`) provides the `catch_discover_tests` function.
# This function integrates with CTest by running the compiled test executable with special arguments
# (e.g., --list-tests) to automatically discover all registered Catch2 test cases at build time.
# This avoids the need to manually add `add_test` commands for each test case.
include(Catch) # Provides catch_discover_tests
catch_discover_tests(WaffleTests)

# Apply coverage flags if enabled (flags are defined in the root CMakeLists.txt)
# This ensures that the test executable itself is compiled with coverage instrumentation,
# allowing tools like gcov/lcov to measure which parts of the test code (and linked library code)
# were executed during the test runs.
# The `COVERAGE_COMPILE_FLAGS` and `COVERAGE_LINK_FLAGS` are expected to be set in the root CMakeLists.txt
# if `BUILD_COVERAGE` is ON and the compiler is supported.
if(BUILD_COVERAGE AND COVERAGE_COMPILE_FLAGS AND TARGET WaffleTests) # Check COVERAGE_COMPILE_FLAGS to ensure flags were actually set
  message(STATUS "Applying coverage flags to WaffleTests target.")
  target_compile_options(WaffleTests PRIVATE ${COVERAGE_COMPILE_FLAGS})
  target_link_options(WaffleTests PRIVATE ${COVERAGE_LINK_FLAGS}) # Requires CMake 3.13+
endif()